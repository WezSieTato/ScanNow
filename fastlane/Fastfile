default_platform(:ios)

platform :ios do

  before_all do |lane, options|
    if is_ci then
      install_mint
      mint_bootstrap
    end
  end

  lane :test do
    check_generated_code
    swiftlint(
      executable: mint_which(package: 'swiftlint'),
      strict: true,
      raise_if_swiftlint_error: true
    )
    swiftformat(
      executable: mint_which(package: 'swiftformat'),
      lint: true
    )
    scan
  end

  lane :check_generated_code do
    mint_run(command: "swiftgen")
    ensure_no_changes(
      path: "ScanNow/generated",
      show_diff: false,
      error_message: "Generated code is different than swiftgen output. Run `mint run swiftgen` to re-generate code."
    )

    ENV["SOURCERY_EXECUTABLE"] = mint_which(package: 'sourcery')
    sourcery(config: "App/Tests/ScanNowCoreTests/.sourcery.yml")

    ensure_no_changes(
      path: "App/Tests/ScanNowCoreTests/generated",
      show_diff: false,
      error_message: "Generated code is different than sourcery output. Run `mint run sourcery` in `ScanNowTests` directory to re-generate code."
    )
  end

  lane :generate_code do
    mint_run(command: "swiftgen")
    ENV["SOURCERY_EXECUTABLE"] = mint_which(package: 'sourcery')
    sourcery(config: "App/Tests/ScanNowCoreTests/.sourcery.yml")
  end

  lane :record_snapshots do
    desc "Removes all snapshot files from __Snapshots__ directories"
    sh("find .. -name '__Snapshots__' -type d -exec rm -rf {} \\; 2>/dev/null || true")
    UI.success("All snapshot files have been removed")
    scan(
      fail_build: false
    )
    commit_and_push_if_ci(
      message: "Record snapshot :camera:",
      path: ["ScanNowTests", "App/Tests"]
    )
  end

  lane :beta do
    build_app(workspace: "ScanNow.xcworkspace", scheme: "ScanNow")
    changelog_from_git_commits
    upload_to_testflight(
      groups:["TeamA"],
      distribute_external: true
    )
  end

  private_lane :commit_and_push_if_ci do |options|
    if is_ci

      if !options[:message]
        message "No message specified!".red
      end
      message = options[:message]

      if !options[:path]
        path "No path specified!".red
      end
      path = options[:path]

      git_commit(
        message: message,
        path: path
      )
      push_to_git_remote
    end
  end
end
